import os
import re
import streamlit as st
import tempfile
import subprocess
from openai import OpenAI
from dotenv import load_dotenv
import shutil

def get_video_id(url):
    patterns = [r'(?:v=|/)([0-9A-Za-z_-]{11})', r'youtu\.be/([0-9A-Za-z_-]{11})', r'shorts/([0-9A-Za-z_-]{11})']
    for pattern in patterns:
        match = re.search(pattern, url)
        if match:
            return match.group(1)
    return None

def download_audio(url):
    temp_dir = tempfile.mkdtemp()
    audio_path = os.path.join(temp_dir, "audio.mp3")
    try:
        subprocess.run(["yt-dlp", "-x", "--audio-format", "mp3", "-o", audio_path, url], check=True)
        return audio_path
    except Exception as e:
        st.error(f"Error downloading audio: {e}")
        return None

def transcribe_audio(audio_path, client):
    try:
        with open(audio_path, "rb") as f:
            transcript = client.audio.transcriptions.create(model="whisper-1", file=f, response_format="text")
        return transcript
    except Exception as e:
        st.error(f"Error transcribing audio: {e}")
        return None

def summarize_text(text, client):
    try:
        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": "You are a professional summarizer. Provide: 1) 5 Key Points, 2) Main Takeaways, 3) Actionable Insights."},
                {"role": "user", "content": f"Summarize concisely:\n\n{text[:15000]}"}
            ]
        )
        return response.choices[0].message.content
    except Exception as e:
        st.error(f"Error summarizing text: {e}")
        return None

def main():
    load_dotenv()
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    st.title("YouTube Video Summarizer")
    url = st.text_input("Enter YouTube URL:")
    if st.button("Summarize"):
        if not url:
            st.warning("Please enter a YouTube URL")
            return
        with st.spinner("Processing..."):
            progress = st.progress(0)
            audio_path = download_audio(url)
            progress.progress(30)
            if audio_path:
                transcript = transcribe_audio(audio_path, client)
                progress.progress(60)
                if transcript:
                    summary = summarize_text(transcript, client)
                    progress.progress(90)
                    if summary:
                        st.subheader("üìù Summary")
                        st.write(summary)
                        st.markdown("**Additional Insights:**")
                        st.write("- Topics identified\n- Suggested next steps\n- Potential benefits")
                        with st.expander("üìÑ Full Transcript"):
                            st.text_area("Transcript", transcript, height=200)
            shutil.rmtree(os.path.dirname(audio_path), ignore_errors=True)
            progress.progress(100)

if __name__ == "__main__":
    main()
